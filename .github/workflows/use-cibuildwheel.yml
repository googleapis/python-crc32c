name: Build Wheels

on:
  pull_request:
    branches:
      - main

jobs:

# build-wheels-linux:
#   name: Build wheels on ${{ matrix.os }}
#   strategy:
#     matrix:
#       os:
#       - ubuntu-20.04
#   runs-on: ${{ matrix.os }}
#
#   steps:
#   - uses: actions/checkout@v2
#     with:
#       submodules: 'recursive'
#
#   - name: Build Wheels
#     uses: pypa/cibuildwheel@v2.1.1
#     env:
#       CIBW_ENVIRONMENT: >
#           CRC32C_PURE_PYTHON="0"
#           CRC32C_INSTALL_PREFIX="$(pwd)/usr"
#       CIBW_BUILD_VERBOSITY: 1
#       # We build these inside CIBW so that the manylinux image is
#       # used to build the library;  otherwise, we wouldn't be able to
#       # link with it.
#       CIBW_BEFORE_BUILD: >
#           python -m pip install --upgrade setuptools pip wheel &&
#           python -m pip install cmake &&
#           cmake -S google_crc32c -B build \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DCRC32C_BUILD_TESTS=no \
#               -DCRC32C_BUILD_BENCHMARKS=no \
#               -DBUILD_SHARED_LIBS=yes \
#               -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/usr &&
#           make -C build all install
#       CIBW_TEST_REQUIRES: pytest
#       CIBW_TEST_COMMAND: py.test -v {project}/tests/
#
#   - uses: actions/upload-artifact@v2
#     with:
#       name: python-package-distributions
#       path: ./wheelhouse/google_crc32c*.whl
#
# build-wheels-macos:
#   name: Build wheels on ${{ matrix.os }}
#   strategy:
#     matrix:
#       os:
#       - macos-10.15
#      #- macos-11
#   runs-on: ${{ matrix.os }}
#   steps:
#
#   - uses: actions/checkout@v2
#     with:
#       submodules: 'recursive'
#
#   - name: Build C Library
#     run: >
#       python -m pip install --upgrade setuptools pip wheel &&
#       python -m pip install cmake &&
#       cmake -S google_crc32c -B build \
#           -DCMAKE_BUILD_TYPE=Release \
#           -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
#           -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
#           -DCRC32C_BUILD_TESTS=no \
#           -DCRC32C_BUILD_BENCHMARKS=no \
#           -DBUILD_SHARED_LIBS=yes \
#           -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/usr \
#           -DCMAKE_INSTALL_NAME_DIR:PATH=${{ github.workspace }}/usr/lib &&
#       make -C build all install
#
#   - name: Build Wheels
#     uses: pypa/cibuildwheel@v2.1.1
#     env:
#       CIBW_ENVIRONMENT: >
#           CRC32C_PURE_PYTHON="0"
#           CRC32C_INSTALL_PREFIX="$(pwd)/usr"
#       CIBW_BUILD_VERBOSITY: 1
#       CIBW_ARCHS_MACOS: x86_64 universal2
#       CIBW_TEST_REQUIRES: pytest
#       CIBW_TEST_COMMAND: py.test -v {project}/tests/
#
#   - uses: actions/upload-artifact@v2
#     with:
#       name: python-package-distributions
#       path: ./wheelhouse/google_crc32c*.whl

  build-wheels-windows:
    name: Build wheels on ${{ matrix.os }} ( ${{ matrix.platform }} )
    strategy:
      matrix:
        os:
        - windows-2019
        platform:
        - x64
        - Win32
    runs-on: ${{ matrix.os }}
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Get C library hash
      id: get-c-lib-hash
      run:
        echo "::set-output name=hash::$(git -C google_crc32c log -n 1 --pretty=%H)"

    - name: Cache C library
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}\usr
        key:
            libcrc32c-${{ matrix.os }}-${{ matrix.platform }}-${{ steps.get-c-lib-hash.outputs.hash }}

    - name: Build C Library
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "::group::Install cmake"
        python -m pip install --upgrade setuptools pip wheel
        python -m pip install cmake
        echo "::endgroup::"
        echo "::group::Run cmake to initialze build tree"
        cmake -S google_crc32c -B build -G "Visual Studio 16 2019" -A ${{ matrix.platform }} -DCRC32C_BUILD_BENCHMARKS=no -DCRC32C_BUILD_TESTS=no -DBUILD_SHARED_LIBS=no -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=yes -DCRC32C_USE_GLOG=0
        echo "::endgroup::"
        echo "::group::Run cmake to build library"
        cmake --build build --verbose --config Release
        echo "::endgroup::"
        echo "::group::Run cmake to install library"
        cmake --install build --verbose --config Release --prefix=${{ github.workspace }}\usr\
        echo "::endgroup::"

#   # TODO: For debugging -- remove later.
#   - uses: actions/upload-artifact@v2
#     with:
#       name: libcrc32c-${{ matrix.os }}-${{ matrix.platform }}
#       path: ${{ github.workspace }}\usr\${{ matrix.platform }}

    - name: Build Wheels
      uses: pypa/cibuildwheel@v2.1.1
      env:
        CIBW_ARCHS: native
        CIBW_ENVIRONMENT: CRC32C_PURE_PYTHON="0" CRC32C_INSTALL_PREFIX="D:/a/python-crc32c/python-crc32c/usr"
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: py.test -v {project}/tests

    - uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        path: ./wheelhouse/google_crc32c*.whl
